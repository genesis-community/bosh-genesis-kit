---
meta:
  # Have to put the postgres properties here, because we can't reference the
  # postgres-9.4 job in spruce due to it having a '.' in the job name.
  postgres:
    adapter:        postgres
    database:       bosh
    listen_address: 127.0.0.1
    host:           127.0.0.1
    user:           boshdb
    password:       (( vault meta.vault "/db:password" ))
  registry: {} # In case we don't addon registry
  default:
    azs: [z1]

params:
  bosh_network:   bosh
  bosh_disk_pool: bosh
  bosh_vm_type:   large

  session_timeout: 1 # In days

  ntp: [ 0.pool.ntp.org, 1.pool.ntp.org ]

  static_ip: (( param "What IP will BOSH be accessible on?" ))
  bosh_hostname: bosh

exodus:
  url:            (( concat "https://" params.static_ip ":25555" ))
  ca_cert:        (( vault meta.vault "/ssl/ca:certificate" ))
  admin_username: admin
  admin_password: (( vault meta.vault "/users/admin:password" ))

name: (( grab params.name ))

releases:
  - name: bosh
    .:    (( inject meta.releases.bosh ))
  - name: bpm
    .:    (( inject meta.releases.bpm ))

stemcells:
  - alias: default
    os:      (( grab params.stemcell_os      || "ubuntu-xenial" ))
    version: (( grab params.stemcell_version || "315.latest"    ))

update:
  canaries: 1
  max_in_flight: 1
  canary_watch_time: 30000-600000
  update_watch_time: 30000-600000
  serial: true

instance_groups:
  - name: bosh
    instances: 1
    vm_type:              (( grab params.bosh_vm_type ))
    resource_pool:        (( grab params.bosh_vm_type ))
    persistent_disk_type: (( grab params.bosh_disk_pool ))
    persistent_disk_pool: (( grab params.bosh_disk_pool ))
    azs: (( grab params.availability_zones || meta.default.azs ))
    stemcell: default
    networks:
    - name: (( grab params.bosh_network ))
      static_ips:
        - (( grab params.static_ip ))
    jobs:
      - name: bpm
        release: bpm

      - name: nats
        release: bosh
        properties:
          nats:
            address:  (( grab params.static_ip ))
            user:     natsuser
            password: (( vault meta.vault "/nats:password" ))
            tls:
              ca: (( vault meta.vault "/nats/ca:certificate" ))
              client_ca:
                certificate: (( vault meta.vault "/nats/ca:certificate" ))
                private_key: (( vault meta.vault "/nats/ca:key" ))
              server:
                certificate: (( vault meta.vault "/nats/server:certificate" ))
                private_key: (( vault meta.vault "/nats/server:key" ))
              director:
                certificate: (( vault meta.vault "/nats/director:certificate" ))
                private_key: (( vault meta.vault "/nats/director:key" ))
              health_monitor:
                certificate: (( vault meta.vault "/nats/health/monitor:certificate" ))
                private_key: (( vault meta.vault "/nats/health/monitor:key" ))

      - name: postgres-9.4
        release: bosh
        properties:
          postgres: (( grab meta.postgres ))

      - name: blobstore
        release: bosh
        properties:
          blobstore:
            address:  (( grab params.static_ip ))
            port:     25250
            provider: dav
            agent:
              user:     blobstore-user
              password: (( vault meta.vault "/blobstore/agent:password" ))
            director:
              user:     director-user
              password: (( vault meta.vault "/blobstore/director:password" ))
            tls:
              cert:
                ca:          (( vault meta.vault "/blobstore/ca:certificate" ))
                certificate: (( vault meta.vault "/blobstore/server:certificate" ))
                private_key: (( vault meta.vault "/blobstore/server:key" ))

      - name: director
        release: bosh
        properties:
          env:
            http_proxy:  (( grab params.http_proxy  || "" ))
            https_proxy: (( grab params.https_proxy || "" ))
            no_proxy:    (( grab params.no_proxy    || "" ))
          director:
            name: (( grab name ))
            port: 25555
            address: (( grab params.static_ip ))
            workers: 4
            db: (( grab meta.postgres ))
            ssl:
              cert: (( vault meta.vault "/ssl/server:certificate" ))
              key: (( vault meta.vault "/ssl/server:key" ))
            flush_arp:                       true
            enable_post_deploy:              true
            generate_vm_passwords:           true
            enable_dedicated_status_worker:  true
            enable_nats_delivered_templates: true
            enable_cpi_resize_disk:          true
            local_dns:
              enabled: true
            events:
              record_events: true
            trusted_certs: (( grab params.trusted_certs || "" ))
          blobstore: (( grab instance_groups.bosh.jobs.blobstore.properties.blobstore ))
          nats: (( grab instance_groups.bosh.jobs.nats.properties.nats ))
          ntp: (( grab params.ntp ))
          registry: (( grab meta.registry ))
          agent:
            mbus: (( concat "nats://" instance_groups.bosh.jobs.nats.properties.nats.user ":" instance_groups.bosh.jobs.nats.properties.nats.password "@" params.static_ip ":4222" ))
            env:
              bosh:
                blobstores:
                  - provider: dav
                    options:
                      # FIXME: one day we should set this to https://, for full TLS
                      endpoint: (( concat "http://" params.static_ip ":25250" ))
                      user:     blobstore-user
                      password: (( vault meta.vault "/blobstore/agent:password" ))
                      tls:
                        cert:
                          ca: (( vault meta.vault "/blobstore/ca:certificate" ))

      - name: health_monitor
        release: bosh
        properties:
          hm:
            resurrector_enabled: true
            director_account:
              ca_cert:       (( vault meta.vault "/ssl/ca:certificate" ))
          nats: (( grab instance_groups.bosh.jobs.nats.properties.nats ))
          director: 
            address: (( grab instance_groups.bosh.jobs.director.properties.director.address ))
            port: (( grab instance_groups.bosh.jobs.director.properties.director.port ))
          env: (( grab instance_groups.bosh.jobs.director.properties.env )) 

