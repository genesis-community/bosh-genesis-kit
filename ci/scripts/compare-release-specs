#!/bin/bash
set -ue

# What branch is the comparison of the current working branch being compared against
compare_branch="${1:-origin/}"
check_dirs="spec manifests manifests/releases"

orig_dir="$(pwd)"
# needed because of when running locally or in ci
ci_dir="../$(basename "$(pwd)")-ci"
if [[ -d "$ci_dir" ]]; then
  ci_dir="$(cd "$ci_dir" && pwd)"
else
  ci_dir="$orig_dir"
fi

release_files() {
  for d in $check_dirs; do
    grep -rl '^releases' "$d" 2>/dev/null || true
  done
}

releases() {
  eval "spruce merge --skip-eval $( \
  release_files \
  | sed -e "s/\\(.*\\)/\<(spruce json \\1 | jq -r '{releases: .releases}')/" |tr "\n" " " \
  ) | spruce merge | spruce json | jq -r ."
}

workdir="$(mktemp -d)"
mkdir "$workdir/compare"
cp -R "$(pwd)/.git" "$workdir/compare/"
pushd "$workdir/compare" > /dev/null
git checkout -qf --detach "$compare_branch"
prev_releases="$(releases)"
popd > /dev/null
rm -rf "$workdir/compare"

curr_releases="$(releases)"


prev_rel_names="$(echo "$prev_releases"| jq -r '.releases[] | .name' | sort)"
curr_rel_names="$(echo "$curr_releases"| jq -r '.releases[] | .name' | sort)"

removed=()
while IFS='' read -r rel ; do
  removed+=( "$rel" )
done <<<"$(diff -p <(echo "$prev_rel_names") <(echo "$curr_rel_names") | grep '^- ' | sed -e 's/- //')"
added=()
while IFS='' read -r rel ; do
  added+=( "$rel" )
done <<<"$(diff -p <(echo "$prev_rel_names") <(echo "$curr_rel_names") | grep '^+ ' | sed -e 's/+ //')"

unchanged=()
changed=()
while IFS='' read -r rel; do
  prev_ver="$(echo "$prev_releases" | jq -r --arg r "$rel" '(.releases[] | select(.name == $r) | .version ) // "--none--" ' )"
  if [[ "$prev_ver" == "--none--" ]] ; then continue ; fi
  curr_ver="$(echo "$curr_releases" | jq -r --arg r "$rel" '.releases[] | select(.name == $r) | .version' )"
  if [[ "$prev_ver" == "$curr_ver" ]] ; then
    unchanged+=( "$rel $curr_ver" )
  else
    changed+=( "$rel $prev_ver $curr_ver" )
  fi
done <<< "${curr_rel_names[@]}"

# Write diff outputs
if [[ "${#removed[@]}" -gt 0 && -n "${removed[0]}" ]] ; then
  echo "Removed Releases:"
  for rel in "${removed[@]}" ; do
    echo "  - $rel"
  done
  echo
fi

if [[ "${#unchanged[@]}" -gt 0 && -n "${unchanged[0]}" ]] ; then
  echo "Unchanged Releases:"
  for info in "${unchanged[@]}" ; do
    read -r rel curr_ver <<<"$info"
    echo "  - $rel ($curr_ver)"
  done
  echo
fi

if [[ "${#added[@]}" -gt 0 && -n "${added[0]}" ]] ; then
  echo "Added Releases:"
  for rel in "${added[@]}" ; do
    echo "  - $rel"
  done
  echo
fi

if [[ "${#changed[@]}" -gt 0 && -n "${changed[0]}" ]] ; then
  echo "Changed Releases:"
  for info in "${changed[@]}" ; do
    read -r rel prev_ver curr_ver <<<"$info"
    echo "  - $rel ($prev_ver -> $curr_ver)"
  done
  echo

  echo "Fetching spec diffs..."
  if [ -f "${ci_dir}/ci/upstreamrepo.yml" ]; then
    upstreamrepo=$(spruce json "${ci_dir}/ci/upstreamrepo.yml")
  else
    upstreamrepo="[]"
  fi
  repos="$(
    echo "$curr_releases" \
    | jq --argjson gitrepos "$upstreamrepo" -r 'reduce .releases[] as {$name, $url, $sha1, $version} ({repos: []};
        ($url
        | if ($url | test("https?://s3.amazonaws.com")) then
            ($gitrepos.repos | map(select(.name == $name))[0].repo)
            elif ($url | test("https?://bosh.io")) then
            ($url | sub("^.*/d/";"https://") | sub("\\?v=.*$";""))
            elif ($url | test("https?://github.com")) then
            ($url | sub("^.*http";"http") | sub("/releases/download/.*$";""))
            else
            $url
            end
        ) as $repo |
        (.repos += [{$name,$repo}])
    )')"

  for info in "${changed[@]}" ; do
    read -r rel prev_ver curr_ver <<<"$info"
    repo="$(echo "$repos" | jq -r --arg r "$rel" '.repos[] | select(.name == $r) | .repo' )"
    rel_dir="$workdir/releases/$rel"
    mkdir -p "$rel_dir"
    git -C "$rel_dir" init >/dev/null 2>&1 && \
    git -C "$rel_dir" remote add origin -f "$repo" >/dev/null 2>&1 && \
    git -C "$rel_dir" config core.sparseCheckout true >/dev/null 2>&1

    echo "/jobs" > "$rel_dir/.git/info/sparse-checkout"

    set +e
    reponame=$(echo "${repo}" | grep github | cut -d "/" -f4-5)
    set -e
    if [[ -n ${reponame}  ]]; then
      cmd=( curl --silent -L -H "Accept: application/vnd.github.v3+json" )
      [[ -n "$GITHUB_AUTH_TOKEN" ]] && cmd+=( -H "Authorization: token $GITHUB_AUTH_TOKEN" )
      cmd+=( "https://api.github.com/repos/${reponame}" )
      branch=$( "${cmd[@]}" | jq -r .default_branch)
    else
      branch="master"
    fi

    git -C "$rel_dir" pull --depth 1 origin ${branch} > /dev/null 2>&1


    mkdir -p "$workdir/compare-specs"
    for v in "$prev_ver" "$curr_ver" ; do
      set +e
      git -C "$rel_dir" checkout -f "$v" >/dev/null 2>&1 || git -C "$rel_dir" checkout -f "v$v" >/dev/null 2>&1
      set -e
      #shellcheck disable=2181
      if [[ "$?" == '0' ]] ; then
        (cd "$rel_dir/jobs"; for x in * ; do
          [[ -d "$workdir/compare-specs/$x" ]] || mkdir -p "$workdir/compare-specs/$x"
          [[ -f "$x/spec" ]] && cp "$x/spec" "$workdir/compare-specs/$x/spec-$v"
        done) > /dev/null 2>&1
      else
        echo "[ERROR] Cannot find version $v of release $rel"
      fi
    done
    spec_changed=0
    pushd "$workdir/compare-specs" >/dev/null
    for job in * ; do
      if [[ -f "$job/spec-$prev_ver" && -f "$job/spec-$curr_ver" ]] ; then
        if ! diff -q "$job/spec-$prev_ver"  "$job/spec-$curr_ver" > /dev/null 2>&1; then
          echo "[35;1m[$rel/job/$job][31;1m Change detected in spec file between $prev_ver and $curr_ver[0m"
          spruce diff "$job/spec-$prev_ver" "$job/spec-$curr_ver" || true
          spec_changed=1
        fi
      elif [[ -f "$job/spec-$prev_ver" || -f "$job/spec-$curr_ver" ]] ; then
        spec_changed=1
        [[ -f "$job/spec-$prev_ver" ]] || echo "[35;1m[$rel/job/$job][33;1m No spec found in previous version ($prev_ver)[0m"
        [[ -f "$job/spec-$curr_ver" ]] || echo "[35;1m[$rel/job/$job][33;1m No spec found in current version ($curr_ver)[0m"
      fi
    done
    [[ "$spec_changed" == "0" ]] && echo "[35;1m[$rel][32;1m No changes to spec files between $prev_ver and $curr_ver[0m"
    popd >/dev/null
    rm -rf "$workdir/compare-specs"
    rm -rf "$workdir/releases/$rel"
    echo
  done
else
  echo "No Spec Changes to Consider"
  echo
fi
[[ -n "$workdir" ]] && rm -rf "$workdir"
