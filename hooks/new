#!/bin/bash
set -u
#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

isproto=
prompt_for isproto boolean \
	'Is this a proto-BOSH director?'

ip=
prompt_for ip line \
	'What static IP do you want to deploy this BOSH director on?' \
	--validation ip

if [[ $isproto == 'true' ]]; then
	proto_net=
	prompt_for proto_net line \
		'What network should this BOSH director exist in (in CIDR notation)?'
	proto_gw=
	prompt_for proto_gw line \
		'What default gateway (IP address) should this BOSH director use?' \
		--validation ip

	proto_dns=
	prompt_for proto_dns multi-line \
		'What DNS servers should BOSH use?'
fi

###########################################################################

iaas=
prompt_for iaas select \
	'What IaaS will this BOSH director orchestrate?' \
	-o '[vsphere]   VMWare vSphere'        \
	-o '[aws]       Amazon Web Services'   \
	-o '[azure]     Microsoft Azure'       \
	-o '[google]    Google Cloud Platform' \
	-o '[openstack] OpenStack' \
	-o '[warden]    BOSH Warden'

features=()
case $iaas in
aws)
	aws_region=
	prompt_for aws_region line \
		'What AWS region would you like to deploy to?'


	aws_iam_profile_name=
	aws_auth_method=
	prompt_for aws_auth_method select \
	  'How will this BOSH director authenticate to AWS?' \
		-o '[access_key] Access/Secret Keypair' \
		-o '[profile]    IAM Instance Profile'  
	
	if [[ $aws_auth_method == 'access_key' ]]; then
		aws_access_key=
		prompt_for aws_access_key line \
			'What is your AWS Access Key?'
		prompt_for aws:secret_key secret-line \
			'What is your AWS Secret Key?'
		safe set --quiet "${GENESIS_SECRETS_BASE}aws" access_key="$aws_access_key"
  else
	  features+=(
			"iam-instance-profile"
		) 

		if [[ $isproto == 'true' ]]; then
			prompt_for aws_iam_profile_name line \
				'What AWS IAM instance profile should the Proto-BOSH VM have associated with it?'
		fi
	fi

	aws_default_sgs=
	prompt_for aws_default_sgs multi-line \
		'What security groups should the all deployed VMs be placed in?'

	if [[ $isproto == 'true' ]]; then
		aws_subnet=
		prompt_for aws_subnet line \
			'What is the ID of the AWS subnet you want to deploy to?'

		aws_bosh_sgs=
		prompt_for aws_bosh_sgs multi-line \
			'What security groups should the BOSH Director VM be in?'
	fi

	cat >&2 <<EOF

    Before deploying, please be sure to import the keypair generated for you from
    Vault into AWS console.

    First run the following command to get the public key:

      safe -T $GENESIS_TARGET_VAULT get ${GENESIS_SECRETS_BASE}aws/ssh:public

    Then go to EC2 > Key Pairs > Import Key Pair and:

      1. Type 'vcap@$GENESIS_ENVIRONMENT' in the 'Key pair name' input box
      2. Paste the safe command output into the 'Public key contents' input box
      3. Click 'Import' button

    Now you can SSH into VMs deployed by this director using the generated key.

EOF
	;;

vsphere)
	vsphere_address=
	prompt_for vsphere_address line \
		'What is the IP address of your VMWare vCenter Server Appliance?' \
		--validation ip
	vsphere_user=
	prompt_for vsphere_user line \
		'What username should BOSH use to authenticate with vCenter?'
	prompt_for vsphere:password secret-line \
		'What is the password for the vCenter user?'
	safe --quiet set "${GENESIS_SECRETS_BASE}vsphere" user="$vsphere_user" address="$vsphere_address"

	vsphere_dc=
	prompt_for vsphere_dc line \
		'What vCenter data center do you want to BOSH to deploy to?'
	vsphere_cluster=
	prompt_for vsphere_cluster line \
		'What vCenter cluster do you want BOSH to deploy to?'
	vsphere_resource_pool=
	prompt_for vsphere_resource_pool line --default none \
		'What vCenter resource pool (if any) do you want BOSH to deploy to?'

	vsphere_ephemerals=
	prompt_for vsphere_ephemerals multi-line -m 1 \
		'What data stores do you wish to use for ephemeral (OS) disks?'
	same_datastores=
	prompt_for same_datastores boolean \
		'Do you wish to use these same data stores for persistent (data) disks?'
	if [[ $same_datastores == 'false' ]]; then
		vsphere_persistents=
		prompt_for vsphere_persistents multi-line -m 1 \
			'What data stores do you wish to use for persistent (data) disks?'
	else
		vsphere_persistents=("${vsphere_ephemerals[@]}")
	fi

	if [[ $isproto == 'true' ]]; then
		vsphere_net=
		prompt_for vsphere_net line \
			'What is the name of the VM network in vCenter to deploy BOSH to?'
	fi
	;;

google)
	google_project_id=
	prompt_for google_project_id line \
		'What is your GCP project ID?'
	google_json_key=
	prompt_for google_json_key block \
		'What are your GCP credentials (generally supplied as a JSON block)?'
	safe set --quiet "${GENESIS_SECRETS_BASE}google" json_key="$google_json_key"

	if [[ $isproto == 'true' ]]; then
		google_net=
		prompt_for google_net line \
			'What is your GCP network name?'
		google_subnet=
		prompt_for google_subnet line \
			'What is your GCP subnetwork name?'
		google_azs=
		prompt_for google_azs line \
			'What availability zone do you want the BOSH VM to reside in?'
		google_tags=
		prompt_for google_tags multi-line \
			'What tags would you like to be set on the BOSH VM?'
	fi
	;;

azure)
	azure_client_id=
	prompt_for azure_client_id line \
		'What is your Azure Client ID?'
	prompt_for azure:client_secret secret-line \
		'What is your Azure Client Secret?'
	azure_tenant_id=
	prompt_for azure_tenant_id line \
		'What is your Azure Tenant ID?'
	azure_subscription_id=
	prompt_for azure_subscription_id line \
		'What is your Azure Subscription ID?'
	azure_resource_group=
	prompt_for azure_resource_group line \
		'What Azure Resource Group will BOSH be deploying VMs into?'
	safe --quiet set "${GENESIS_SECRETS_BASE}azure" \
		client_id="$azure_client_id" \
		tenant_id="$azure_tenant_id" \
		subscription_id="$azure_subscription_id"

	azure_default_sg=
	prompt_for azure_default_sg line \
		'What security group should be used as the BOSH default security group?'

	if [[ $isproto == "true" ]]; then
		azure_vnet=
		prompt_for azure_vnet line \
			'What is the name of your Azure Virtual Network?'
		azure_subnet_name=
		prompt_for azure_subnet_name line \
			'What is the name of the Azure subnet that the BOSH will be placed in?'
	fi
	;;

openstack)
	openstack_auth_url=
	prompt_for openstack_auth_url line \
		'What is the Auth URL of your OpenStack cluster?'
	openstack_user=
	prompt_for openstack_user line \
		'What username will be used to authenticate with OpenStack?'
	prompt_for openstack/creds:password secret-line \
		'What password will be used to authenticate with OpenStack?'
	openstack_domain=
	prompt_for openstack_domain line \
		'What OpenStack Domain will BOSH be deployed in?'
	openstack_project=
	prompt_for openstack_project line \
		'What OpenStack Project will BOSH be deployed in?'
	safe set --quiet "${GENESIS_SECRETS_BASE}openstack/creds" \
		username="$openstack_user" \
		domain="$openstack_domain" \
		project="$openstack_project"

	openstack_region=
	prompt_for openstack_region line \
		'What OpenStack Region is BOSH being deployed to?'
	openstack_ssh_key=
	prompt_for openstack_ssh_key line \
		'What is the name of the OpenStack SSH key that should be used to enable SSH access to BOSH-deployed VMs?'
	openstack_default_sgs=
	prompt_for openstack_default_sgs multi-line \
		'What default security groups should be applied to VMs created by BOSH?'

	if [[ $isproto == "true" ]]; then
		openstack_network_id=
		prompt_for openstack_network_id line \
			'What is the UUID of the OpenStack network that BOSH will be placed in?'
		openstack_flavor=
		prompt_for openstack_flavor line \
			'What OpenStack flavor (instance type) should the BOSH VM use?'
		openstack_az=
		prompt_for openstack_az line \
			'What AZ will the BOSH Director be placed in?'
	fi
	;;
esac

###########################################################################

(
echo "kit:"
echo "  name:    $GENESIS_KIT_NAME"
echo "  version: $GENESIS_KIT_VERSION"
echo "  features:"
echo "    - $iaas"
if [[ $isproto == 'true' ]]; then
	echo "    - proto"
fi
for feature in "${features[@]}"; do
	echo "    - ${feature}"
done

genesis_config_block

echo
echo "params:"

if [[ $isproto == 'true' ]]; then
	echo "  # These properties definte the host-level networking for a proto-BOSH."
	echo "  # Environmental BOSHes can depend on their parent BOSH cloud-config,"
	echo "  # but for proto- environments, we have to specify these."
	echo "  #"
	echo "  static_ip:       $ip"
	echo "  subnet_addr:     $proto_net"
	echo "  default_gateway: $proto_gw"
	echo "  dns:"
	for dns in "${proto_dns[@]}"; do
		echo "    - $dns"
	done
else
	echo "  # These parameters are all that we need to specify for an Environment"
	echo "  # BOSH, since networking and VM type configuration comes from that cloud-config"
	echo "  #"
	echo "  static_ip: $ip"
fi
echo


case $iaas in
aws)
	echo "  # BOSH on AWS needs to know what region to deploy to, and what"
	echo "  # default security groups to apply to all VMs by default."
	echo "  #"
	echo "  # AWS credentials are stored in the Vault at"
	echo "  #   ${GENESIS_SECRETS_BASE}aws"
	echo "  #"
	echo "  aws_region: $aws_region"
	echo "  aws_default_sgs:"
	for sg in "${aws_default_sgs[@]}"; do
		echo "    - $sg"
	done
	echo
	if [[ $isproto == 'true' ]]; then
		echo "  # The following configuration is only necessary for proto-BOSH"
		echo "  # deployments, since environment BOSHes will derive their networking"
		echo "  # and VM/AMI configuration from their parent BOSH cloud-config."
		echo "  #"
		echo "  aws_subnet_id: $aws_subnet"

		echo "  aws_security_groups:"
		for sg in "${aws_bosh_sgs[@]}"; do
			echo "    - $sg"
		done
		echo
		if [[ -n $aws_iam_profile_name ]]; then
			echo "  aws_proto_iam_instance_profile: ${aws_iam_profile_name}"
		fi
	fi
	;;

vsphere)
	echo "  # BOSH on vSphere (vCenter) needs to know which vCenter data"
	echo "  # center and cluster to deploy to by default."
	echo "  #"
	echo "  # vCenter credentials are stored in the Vault at"
	echo "  #   ${GENESIS_SECRETS_BASE}vsphere"
	echo "  #"
	echo "  vsphere_datacenter: $vsphere_dc"
	echo "  vsphere_clusters:"
	if [[ ${vsphere_resource_pool} == "none" ]]; then
		echo "    - ${vsphere_cluster}"
	else
		echo "    - ${vsphere_cluster}:"
		echo "        resource_pool: ${vsphere_resource_pool}"
	fi
	echo
	echo "  # BOSH will store ephemeral disks, which house the operating system,"
	echo "  # and temporary work areas, on any of theses data stores"
	echo "  #"
	echo "  vsphere_ephemeral_datastores:"
	for ds in "${vsphere_ephemerals[@]}"; do
		echo "    - $ds"
	done
	echo
	echo "  # BOSH will store persistent disks, which contain the important"
	echo "  # data of your various deployments (databases, blobstores, etc.)"
	echo "  # on any of theses data stores"
	echo "  #"
	echo "  vsphere_persistent_datastores:"
	for ds in "${vsphere_persistents[@]}"; do
		echo "    - $ds"
	done
	echo
	if [[ $isproto == 'true' ]]; then
		echo "  # The following configuration is only necessary for proto-BOSH"
		echo "  # deployments, since environment BOSHes will derive their networking"
		echo "  # configuration from their parent BOSH cloud-config."
		echo "  #"
		echo "  vsphere_network:    $vsphere_net"
		echo
	fi
	;;

google)
	echo "  # BOSH on GCP needs to know what project to deploy to."
	echo "  #"
	echo "  # GCP credentials are stored in the Vault at"
	echo "  #   ${GENESIS_SECRETS_BASE}google"
	echo "  #"
	echo "  google_project: $google_project_id"
	echo
	if [[ $isproto == 'true' ]]; then
		echo "  # The following configuration is only necessary for proto-BOSH"
		echo "  # deployments, since environment BOSHes will derive their networking"
		echo "  # tags, and zone configuration from their parent BOSH cloud-config."
		echo "  #"
		echo "  google_network_name:      $google_net"
		echo "  google_subnetwork_name:   $google_subnet"
		echo "  google_availability_zone: $google_azs"
		echo "  google_tags:"
		for t in "${google_tags[@]}"; do
			echo "    - $t"
		done
		echo
	fi
	;;

azure)
	echo "  # BOSH on Azure needs to know what resource groups to use when"
	echo "  # deploying VMs, as well as what default security group to apply"
	echo "  # to VMs that do not otherwise specify them."
	echo "  #"
	echo "  # Azure credentials are stored in the Vault at"
	echo "  #   ${GENESIS_SECRETS_BASE}azure"
	echo "  #"
	echo "  azure_resource_group: $azure_resource_group"
	echo "  azure_default_sg:     $azure_default_sg"
	echo
	if [[ $isproto == 'true' ]]; then
		echo "  # The following configuration is only necessary for proto-BOSH"
		echo "  # deployments, since environment BOSHes will derive their networking"
		echo "  # and resource groups from their parent BOSH cloud-config."
		echo "  #"
		echo "  azure_virtual_network: $azure_vnet"
		echo "  azure_subnet_name:     $azure_subnet_name"
		echo
	fi
	;;

openstack)
	echo "  # BOSH on Openstack needs to know where the OpenStack API lives,"
	echo "  # what domain / project to use for deploying VMs, as well as what"
	echo "  # default security group to apply to all deployed VMs, and what"
	echo "  # named SSH key governs access to those VMs"
	echo "  #"
	echo "  # Openstack credentials are stored in the Vault at"
	echo "  #   ${GENESIS_SECRETS_BASE}openstack/creds"
	echo "  #"
	echo "  openstack_auth_url: $openstack_auth_url"
	echo "  openstack_region:   $openstack_region"
	echo "  openstack_ssh_key:  $openstack_ssh_key"
	echo "  openstack_default_security_groups:"
	for sg in "${openstack_default_sgs[@]}"; do
		echo "    - $sg"
	done
	echo
	if [[ $isproto == 'true' ]]; then
		echo "  # The following configuration is only necessary for proto-BOSH"
		echo "  # deployments, since environment BOSHes will derive their networking"
		echo "  # flavor, and availability zones from their parent BOSH cloud-config."
		echo "  #"
		echo "  openstack_network_id: $openstack_network_id"
		echo "  openstack_flavor:     $openstack_flavor"
		echo "  openstack_az:         $openstack_az"
		echo
	fi
	;;

esac
) > "$GENESIS_ROOT/$GENESIS_ENVIRONMENT.yml"

offer_environment_editor
