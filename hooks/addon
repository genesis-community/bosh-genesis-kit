#!/bin/bash
set -u
#Version check
min_version="2.7.6"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

export BOSH_ENVIRONMENT=""
export BOSH_CA_CERT=""
export BOSH_CLIENT=""
export BOSH_CLIENT_SECRET=""

# this one is not handled by the BOSH CLI; we set it for our use
BOSH_URL="https://$(lookup params.static_ip):25555"

# the bosh() helper that Genesis gives us is opinionated;
# great for things that are wanting to deal with the _parent_
# BOSH director, but wholly useless for this kit.
#
# let's override it, shall we?
#
bosh() {
  [[ -n "${GENESIS_SHOW_BOSH_CMD:-}" ]] && \
    describe >&2 "#M{BOSH>} $GENESIS_BOSH_COMMAND $*"
  command "$GENESIS_BOSH_COMMAND" "$@"
}

setup_alias() {
  BOSH_ENVIRONMENT="$BOSH_URL" \
    BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
    bosh alias-env --tty "$GENESIS_ENVIRONMENT"| grep -v '^User'
}

is_logged_in() {
  local user
  user="$(bosh -e "$GENESIS_ENVIRONMENT" env --json | jq -Mr ".Tables[0].Rows[0].user")"
  if [[ "$user" == "null" || "$user" == "(not logged in)" ]] ; then
    return 1
  fi
  if [[ "$user" != "admin" ]] ; then
    describe >&2 "Logged in as #C{$user}, expected to be #C{admin}"
    return 2
  fi
  describe "Logged in as #C{$user}..."
  return 0
}

login() {
  echo "Logging you in as user 'admin'..."
  printf "%s\n%s\n" admin "$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" | \
    BOSH_ENVIRONMENT="" \
    BOSH_CA_CERT="" \
    BOSH_CLIENT="" \
    BOSH_CLIENT_SECRET="" \
    bosh -e "$GENESIS_ENVIRONMENT" login
}

credhub_login() {
  # Check for credhub command
  command -v credhub > /dev/null 2>&1 || bail "Command 'credhub' not found.  Please install from https://github.com/cloudfoundry-incubator/credhub-cli"

  # Update api target with correct ca's
  unset CREDHUB_SECRET
  unset CREDHUB_CLIENT
  command credhub api "https://$(lookup params.static_ip):8844" --ca-cert <(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate"; safe read "${GENESIS_SECRETS_BASE}credhub/ca:certificate")

  # Login via stored password
  command credhub login -u credhub-cli -p "$(safe read "${GENESIS_SECRETS_BASE}uaa/users/credhub-cli:password")"
  echo
  command credhub --version
  echo
}

vault_proxy_login() {
  if ! want_feature vault-credhub-proxy; then
    describe "#R{[ERROR]} Requires feature vault-credhub-proxy"
    exit 1
  fi
  echo
  ip="$(lookup params.static_ip)"
  proxy="${GENESIS_ENVIRONMENT}-proxy"
  password="$(safe read "${GENESIS_SECRETS_BASE}uaa/users/credhub-admin:password")"
  export SAFE_TARGET=""
  safe target "https://$ip:8200" -k --no-strongbox "$proxy"
  echo "credhub-admin:$password" | safe -T "$proxy" auth token
  if safe -T "$proxy" set secret/handshake knock=knock >/dev/null 2>&1; then
    if safe -T "$proxy" read secret/handshake >/dev/null 2>&1; then
      describe "" \
               "Successfully connected to Credhub Vault Proxy on #C{https://$ip:8200}" \
               "Target name is #C{$proxy}" \
               ""
      exit 0
    else
      describe "#R{[ERROR]} Could not read from Credhub Vault Proxy on $ip"
    fi
  else
    describe "#R{[ERROR]} Authentication failed or could not write to secret/"
  fi
  exit 1
}

#
# Stemcell Hanlding
#

# Default values for stemcell processing
stemcell_os='ubuntu-xenial'
stemcell_type='regular'
stemcell_download_locally_for_upload=''
stemcell_upload_dryrun=''
stemcell_upload_fix=''

declare -a stemcell_versions; stemcell_versions=()

stemcells() {
  action="$1"
  [[ "$stemcell_type" == "regular" ]] && type_s="full" || type_s="$stemcell_type"

  # Determine cpi
  local cpi prev_cpi prev_cpi_feature want
  for want in ${GENESIS_REQUESTED_FEATURES}; do
    case "$want" in
      aws|aws-cpi)              cpi="aws-xen-hvm" ;;
      azure|azure-cpi)          cpi="azure-hyperv" ;;
      google|google-cpi)        cpi="google-kvm" ;;
      openstack|openstack-cpi)  cpi="openstack-kvm" ;;
      vsphere|vpshere-cpi)      cpi="vsphere-esxi" ;;
      warden|warden-cpi)        cpi="warden-boshlite" ;;
    esac
    if [[ -n "$cpi" ]] ; then
      if [[ -n "${prev_cpi:-}" && "$prev_cpi" != "$cpi" ]] ; then
        describe >&2 \
          "#R{[CONFLICT]} Features '$prev_cpi_feature' and '$want' both correspond to a" \
          "different CPI, using different stemcell types ($prev_cpi and $cpi " \
          "respectively) -- Cannot continue."
        exit 1
      fi
      prev_cpi_feature="$want"
      prev_cpi="$cpi"
    fi
  done

  if [[ -z "$cpi" ]] ; then
    describe >&2 "#R{[ERROR]} No CPI feature defined -- cannot continue.";
    exit 1
  fi

  if [[ ${#stemcell_versions[@]} -gt 0 ]] ; then
    declare -a oses; oses=()
    declare -a stemcells_for_oses; stemcells_for_oses=()
    local req
    for req in "${stemcell_versions[@]}" ; do
      if [[ -f "$GENESIS_CALLER_DIR/$req" && "$action" == "upload" ]] ; then
        __stemcell_upload "$GENESIS_CALLER_DIR/$req"
      else
        IFS="@" read -r req_os req_version <<< "$req"
        i=0; while [[ $i -lt ${#oses[@]} ]] ; do
          [[ ${oses[$i]} == "$req_os" ]] && break
          ((i++))
        done
        if  [[ $i -eq ${#oses[@]} ]] ; then
          oses+=("$req_os")
          target="bosh-$cpi-$req_os-go_agent"
          stemcells_for_oses+=("$(curl -s "https://bosh.io/api/v1/stemcells/${target}?all=0")")
        fi

        # Get specified stemcells
        local pattern match version url sha1
        # shellcheck disable=2001
        pattern="$(echo "$req_version" | sed -e 's/\.latest$/\.[0-9]+/')"
        match="$( \
          echo "${stemcells_for_oses[$i]}" | \
          jq --arg re "^$pattern\$" --arg t "$stemcell_type" '.[] | select((.version|test($re)) and (.|keys|index($t)))' | \
          jq -Ms '.')"
        version="$(echo "$match" | jq -Mr '.[] | .version' | sort -n -t. -k1 -k2 -k3 -k4| tail -n1)"
        if [[ -z "$version" ]] ; then
          describe "#R{[ERROR]} No $type_s version found matching $req_version for OS $req_os"
        else
          if [[ "$version" != "$req_version" ]] ; then
            describe "Using best match to #C{$req_version}: #G{$version}"
          fi
          __stemcell_process_remote "$action" "$cpi" "$req_os" "$version" "$match" "$type_s"
        fi
      fi
    done
  else
    declare -a opts
    target="bosh-$cpi-$stemcell_os-go_agent"
    describe "" "Fetching a list of available #c{$type_s} #g{$stemcell_os} stemcells for #y{$cpi} from #m{bosh.io}"
    stemcells="$(curl -s "https://bosh.io/api/v1/stemcells/${target}?all=0")"
    while true; do
      opts=()
      while read -r count major ; do
        opts+=("-o" "[$major] $major.x ($count minor versions available)")
      done <<< "$(echo "$stemcells" | jq -r --arg t "$stemcell_type" '.[] | select(.|keys|index($t)) | .version' | cut -d. -f1 | sort -nr | uniq -c)"
      if [[ "${#opts[@]}" -lt 0 ]] ; then
        __bail "No #C{$type_s} stemcells found for $cpi $stemcell_os.  Please try a different type or OS."
      fi
      major_sc_version= # Assigned below
      prompt_for major_sc_version "select" "Select the release family for the stemcell you wish to $action:" "${opts[@]}"

      opts=()
      while read -r v ; do
        opts+=("-o" "$v")
      done <<< "$(echo "$stemcells" | jq -r '.[] | .version' | grep "^$major_sc_version\\(\\.\\|$\\)" | sort -rn -t. -k2 -k3 -k4)"
      prompt_for version "select" "Select one of the available $major_sc_version.x versions:" "${opts[@]}"
      __stemcell_process_remote "$action" "$stemcell_os" "$cpi" "$version" "$stemcells" "$type_s"
      rc=$?
      continue= # Assigned below
      prompt_for continue boolean "Another $action [y|n]?" --default "no"
      [[ "$continue" == "true" ]] || exit $rc
    done
  fi
}

__stemcell_process_remote() {
  local url sha1 ext msg dry_run_msg action="$1" os="$2" cpi="$3" version="$4" data="$5" type="$6"
  read -r url sha1 <<< "$(jq -r --arg t "$stemcell_type" --arg v "$version" '.[] | select(.version == $v)| to_entries[] | select(.key == $t).value  | .url + " " + .sha1' <<<"$data")"
  # shellcheck disable=SC2001
  ext="$(echo "$url" | sed -e 's/^.*-go_agent\.//')"

  if [[ "$action" == 'download' ]] ; then
    file="$GENESIS_CALLER_DIR/$cpi-$os-$version-$type.$ext"
    __stemcell_describe_remote "#G{Downloading }#c{$type}#G{ stemcell as }#M{$(humanize_path "$file")}" "$cpi" "$os" "$version" "$url" "$sha1"
    __stemcell_download "$file" "$url" "$sha1"
    return
  fi

  if [[ -n "$stemcell_download_locally_for_upload" ]]; then
    msg="#G{Downloading }#c{$type}#G{ stemcell for local upload to the }#M{$GENESIS_ENVIRONMENT}#G{ BOSH Director:}"
    dry_run_msg="not downloading stemcell or uploading it to BOSH director"
  else
    msg="#G{Initializing remote upload of }#C{$type}#G{ stemcell to the }#M{$GENESIS_ENVIRONMENT}#G{ BOSH Director:}"
    dry_run_msg="not uploading to BOSH director"
  fi
  __stemcell_describe_remote "$msg" "$cpi" "$os" "$version" "$url" "$sha1"

  if [[ -n "$stemcell_upload_dryrun" ]] ; then
    describe "#Y{Option --dry-run specified - $dry_run_msg}"
    return
  fi

  if [[ -n "$stemcell_download_locally_for_upload" ]] ; then
    mkdir -p 'stemcells'
    file="stemcells/$cpi-$os-$version-$type.$ext"
    [[ -f "$file" ]] && rm -f "$file"
    __stemcell_download "$file" "$url" "$sha1"
    __stemcell_upload "$file"
    describe "Cleaning up temporary download"
    rm -f "$file"
  else
    __stemcell_upload "$url" "$sha1"
  fi
}

__stemcell_describe_remote() {
describe "" "$1" \
  "  * CPI:     #C{$2}" \
  "  * OS:      #C{$3}" \
  "  * VERSION: #C{$4}" \
  "  * URL:     #C{$5}" \
  "  * SHA1:    #C{$6}" \
  ""
}

__stemcell_upload() {
  local url="$1"
  declare -a bosh_args; bosh_args=("upload-stemcell")
  [[ -n "$stemcell_upload_fix" ]] && bosh_args+=("--fix")
  [[ "${#@}" -gt 1 ]] && bosh_args+=("--sha1" "$2")
  bosh_args+=("$url")
  describe "Starting upload:"
  BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
    bosh "${bosh_args[@]}"
  return $?
}

__stemcell_download() {
  local file="$1" url="$2" sha1="$3"
  if [[ -f "$file" ]] ; then
    describe "#Y{File $file already exists - cowardly refusing to overwrite it!}"
    return
  fi
  describe "#G{Starting download:}"
  if curl -SLo "$file" "$url" ; then
    sha1sum="$(command -v sha1sum || true)"
    [[ -n "$sha1sum" ]] || sha1sum="$(command -v shasum || true)"
    if [[ -n "$sha1sum" ]] ; then
      if [[ "$($sha1sum "$file" | cut -d ' ' -f1)" == "$sha1" ]] ; then
        describe "" "#G{Download successful - SHA1 digest matches!}"
      else
        describe "" "#R{Download failed - SHA1 digest does not match!}"
        return 1
      fi
    else
      describe "" "#Y{Download completed, but cannot verify SHA1 due to missing sha1sum/shasum executable}"
    fi
  else
    describe "" "#R{Download failed!}"
    return 1
  fi
  return 0
}

runtime_config() {
  describe "" \
    "The \`netop' user is a local administrator account configured with" \
    "a 4096-bit RSA SSH key for authentication.  It can be used to perform" \
    "out-of-band, remote management of BOSH VMs when BOSH is misbehaving." \
    ""
  do_netop=
  prompt_for do_netop boolean \
    "Enable the netop account? " -i

  describe "" \
    "The \`sysop' user is a local administrator account configured with" \
    "a randomized password, for console-based authentication.  This can be" \
    "handy in vSphere environments when network-based authentication breaks." \
    ""
  do_sysop=
  prompt_for do_sysop boolean \
    "Enable the sysop account? " -i

  (set +e
   BOSH_ENVIRONMENT=$BOSH_URL \
   BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
   BOSH_CLIENT="admin" \
   BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
   bosh runtime-config) | sed -e 's/\s+//' | sed '/^$/d' > rc.yml

  if [[ ! -s rc.yml ]]; then
    echo "--- {}" > rc.yml
  fi

  if [[ "${do_netop}" == "true" || "${do_sysop}" == "true" ]]; then
    BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
    bosh update-runtime-config <( (
      echo 'releases:'
      echo '  - name:    os-conf'
      echo '    version: 20'
      echo '    url:     https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=20'
      echo '    sha1:    42b1295896c1fbcd36b55bfdedfe86782b2c9fba'
      echo

      echo 'addons:'
      echo '  - name: genesis-local-users'
      echo '    jobs:'
      echo '      - (( replace ))'
      echo '      - name:    user_add'
      echo '        release: os-conf'
      echo '        exclude:'
      echo '          jobs:'
      echo '          - name: user_add'
      echo '            release: os-conf'
      echo '        properties:'
      echo '          persistent_homes: true'
      echo '          users:'
      if [[ "${do_netop}" == "true" ]]; then
        echo '            - name: netop'
        # shellcheck disable=2016
        echo '              public_key: (( vault $GENESIS_SECRETS_BASE "/op/net:public" ))'
      fi
      if [[ "${do_sysop}" == "true" ]]; then
        echo '            - name: sysop'
        # shellcheck disable=2016
        echo '              crypted_password: (( vault $GENESIS_SECRETS_BASE "/op/sys:password-crypt-sha512" ))'
      fi
    ) |  spruce merge rc.yml - )

  else
    BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
    bosh update-runtime-config <(
      spruce merge <(echo "addons:"
                     echo "  - name: genesis-local-users") \
                   rc.yml \
                   <(echo "addons:"
                     echo '  - (( delete "genesis-local-users" ))')
    )
  fi
}

list() {
  describe "$(cat <<EOF

The following addons are defined for the #C{$GENESIS_KIT_ID} kit:

  #G{alias}                Set up a local bosh alias for a director

  #G{login}                Log into an (aliased) director

  #G{upload-stemcells}     Upload the appropriate BOSH stemcells. Supports the
                       following #y{options} and #B{arguments}:

    #y{--dl}               download the stemcell file to the local machine then
                       upload it.  This may be necessary if the BOSH director
                       does not have direct access to the internet.

    #y{--fix}              upload the stemcell even if its already uploaded

    #y{--os <str>}         use the os <str> (defaults to ubuntu-xenial)

    #y{--light}            use light stemcells instead of full ones

    #y{--dry-run}          provide details on the listed or selected stemcells, but
                       dont upload them to the director.

    #B{<version> ...}      specify one or more versions of default or last
                       specified #y{--os} option

    #B{<os>@<version> ...} specify one or more versions of the given OS

    #B{<file> ...}         specify one or more local stemcell file

                       Version, os@version, and files can be mixed in a single
                       call.  Will be interactive if no version is specified.

  #G{download-stemcells}   Download stemcells that will work on this BOSH director.
                       Supports the same options and arguments as
                       #G{upload-stemcells} except #y{--fix}, #y{--dry-run} and #y{--dl}.

  #G{runtime-config}       Generate a base runtime config and upload it

  #G{credhub-login}        Target and log in to credhub on this bosh director
EOF
  )" ""

  if want_feature vault-credhub-proxy; then
    describe "  #G{vault-proxy-login}    Target and log into credhub via vault proxy using safe" ""
  fi

  if want_feature proto; then
    echo "  delete-proto         Delete proto-BOSH director [use with care!]"
    echo
  fi

}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

alias)
  setup_alias
  ;;

login)
  setup_alias >/dev/null
  login
  ;;

logout)
  setup_alias >/dev/null
  bosh -e "$GENESIS_ENVIRONMENT" logout
  ;;

vault-proxy-login)
  vault_proxy_login
  ;;

credhub-login)
  credhub_login
  ;;

upload-stemcells|us)
  #process options
  while test $# -gt 0 ; do
    case "$1" in
      --dl)       stemcell_download_locally_for_upload=1 ;;
      --dry-run)  stemcell_upload_dryrun=1 ;;
      --fix)      stemcell_upload_fix=1 ;;
      --os)       stemcell_os="$2"; shift ;;
      --light)    stemcell_type="light" ;;
      --*)        describe "#R{[ERROR]} Bad option $1" && exit 1 ;;
      *)          if [[ -f "$GENESIS_CALLER_DIR/$1" || "$1" =~ .*@.* ]]; then
                    stemcell_versions+=("$1")
                  else
                    stemcell_versions+=("$stemcell_os@$1")
                  fi;;
    esac
    shift
  done
  stemcells upload
  ;;

download-stemcells|ds)
  while test $# -gt 0 ; do
    case "$1" in
      --os)      stemcell_os="$2"; shift ;;
      --light)   stemcell_type="light" ;;
      --*)       describe "#R{[ERROR]} Bad option $1" && exit 1 ;;
      *)         if [[ -f "$1" || "$1" =~ .*@.* ]]; then stemcell_versions+=("$1"); else stemcell_versions+=("$stemcell_os@$1"); fi;;
    esac
    shift
  done
  stemcells download "$@"
  ;;

runtime-config|rc)
  runtime_config "$@"
  ;;

ssh) # DO NOT LIST THIS IN 'list'...
  echo ; describe "#G{Accessing $GENESIS_ENVIRONMENT BOSH director via SSH...}" ; echo

  touch .key                             ; chmod 0600 .key
  safe read "${GENESIS_SECRETS_BASE}op/net:private" > .key ; chmod 0400 .key
  # shellcheck disable=2064
  trap "rm -f $PWD/.key" QUIT INT TERM EXIT

  ip=$(lookup params.static_ip)
  set -x
  exec ssh "netop@$ip" -o StrictHostKeyChecking=no -i .key
  ;;

delete-proto)
  if ! want_feature proto; then
    describe "#R{[ERROR]} delete-proto addon supports only #G{proto-BOSH} environments."

  else
    prompt_for confirm_delete boolean \
      "#R{[WARNING]} You are about to #R{PERMANENTLY} DELETE #G{proto-BOSH}" \ 
      "environment #M{$GENESIS_ENVIRONMENT} and assosiated IaaS resources." \
      "Are you #R{ABSOLUTELY} sure you want to proceed?" \
      "Reply 'n' if you are not fully sure." \
      ""

    if [[ "${confirm_delete}" == "true" ]]; then
      describe "Proceeding with deletion. Please be patient..."

      (set +e
        cd $GENESIS_ROOT && genesis manifest --no-redact $GENESIS_ENVIRONMENT
      ) > mfst.yml

      BOSH_ENVIRONMENT=$BOSH_URL \
      BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate") \
      BOSH_CLIENT="admin" \
      BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" \
      bosh delete-env --state=$GENESIS_ROOT/.genesis/manifests/$GENESIS_ENVIRONMENT-state.yml mfst.yml
    fi
  fi
  ;;

*)
  echo "Unrecognized BOSH Genesis Kit addon."
  list
  exit 1
  ;;
esac
