#!/bin/bash
set -u

#Version check
version_check 2.8.2 || exit 1

unset BOSH_ENVIRONMENT
unset BOSH_CA_CERT
unset BOSH_CLIENT
unset BOSH_CLIENT_SECRET

# this one is not handled by the BOSH CLI; we set it for our use
BOSH_URL="https://$(lookup params.static_ip):25555"
export BOSH_URL

# the bosh() helper that Genesis gives us is opinionated;
# great for things that are wanting to deal with the _parent_
# BOSH director, but wholly useless for this kit.
#
# let's override it, shall we?
#
bosh() {
  [[ -n "${GENESIS_SHOW_BOSH_CMD:-}" ]] && \
    describe >&2 "#M{BOSH>} $GENESIS_BOSH_COMMAND $*"
  command "$GENESIS_BOSH_COMMAND" "$@"
}
export -f bosh

target_bosh() {
  BOSH_ENVIRONMENT="$BOSH_URL"
  BOSH_CA_CERT=$(safe read "${GENESIS_SECRETS_BASE}ssl/ca:certificate")
  BOSH_CLIENT="admin"
  BOSH_CLIENT_SECRET="$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")"
  export BOSH_ENVIRONMENT BOSH_CA_CERT BOSH_CLIENT BOSH_CLIENT_SECRET
}
export -f target_bosh

setup_alias() {
  (
    target_bosh
    bosh alias-env --tty "$GENESIS_ENVIRONMENT"| grep -v '^User'
  )
}

has_alias() {
  bosh envs | grep http | awk '{print $2}' | grep -q "^$GENESIS_ENVIRONMENT\$"
}

is_logged_in() {
  local user
  user="$(bosh -e "$GENESIS_ENVIRONMENT" env --json | jq -Mr ".Tables[0].Rows[0].user")"
  if [[ "$user" == "null" || "$user" == "(not logged in)" ]] ; then
    return 1
  fi
  if [[ "$user" != "admin" ]] ; then
    describe >&2 "Logged in as #C{$user}, expected to be #C{admin}"
    return 2
  fi
  describe "Logged in as #C{$user}..."
  return 0
}

login() {
  echo "Logging you in as user 'admin'..."
  printf "%s\n%s\n" admin "$(safe read "${GENESIS_SECRETS_BASE}users/admin:password")" | \
    bosh -e "$GENESIS_ENVIRONMENT" login
}

list() {
  describe "$(cat <<'EOF'

The following addons are defined for the #C{$GENESIS_KIT_ID} kit:

  #Gu{alias}
    Set up a local bosh alias for a director

  #Gu{login}
    Log into an (aliased) director

  #Gu{logout}
    Log out of an (aliased) director

EOF

  for addon in hooks/addon-*; do
    [[ -x "$addon" ]] || chmod +x "$addon"
    msg="$($addon help | sed -e 's/^/    /')" || continue
    label="$(echo "$addon" | sed -e 's/.*\/addon-\([^~]*\).*/\1/')"
    short="$(echo "$addon" | sed -e 's/.*\/addon-\([^~]*\)\(~\(.*\)\)\{0,1\}/\3/')"
    [[ -n "$short" ]] && short="|$short"
    describe "" "  #Gu{$label$short}" "$msg"
  done
  )" ""

}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

alias)
  setup_alias
  ;;

login)
  has_alias || setup_alias >/dev/null
  login
  ;;

logout)
  has_alias || setup_alias >/dev/null
  bosh -e "$GENESIS_ENVIRONMENT" logout
  ;;


ssh) # DO NOT LIST THIS IN 'list'...
  echo ; describe "#G{Accessing $GENESIS_ENVIRONMENT BOSH director via SSH...}" ; echo

  touch .key
  chmod 0600 .key
  safe read "${GENESIS_SECRETS_BASE}op/net:private" > .key ; chmod 0400 .key
  # shellcheck disable=2064
  trap "rm -f $PWD/.key" QUIT INT TERM EXIT

  ip=$(lookup params.static_ip)
  set -x
  exec ssh "netop@$ip" -o StrictHostKeyChecking=no -i .key
  ;;

*)
  addon=
  if [[ -f "hooks/addon-$GENESIS_ADDON_SCRIPT" ]] ; then
    addon="hooks/addon-$GENESIS_ADDON_SCRIPT"
  else
    addon="$(compgen -G "hooks/addon-$GENESIS_ADDON_SCRIPT"'~*')"
    if [[ -z "$addon" ]] ; then
      addon="$(compgen -G 'hooks/addon-*~'"$GENESIS_ADDON_SCRIPT")"
      if [[ -n "$addon" ]] ; then
        label="$(echo "$addon" | sed -e 's/.*\/addon-\([^~]*\).*/\1/')"
        describe >&2 "[1ARunning #G{$label ($GENESIS_ADDON_SCRIPT)} addon for #C{$GENESIS_ENVIRONMENT} #M{bosh} deployment"
      fi
    fi
  fi

  if [[ -n "$addon" && -f "$addon" ]] ; then
    [[ -x "$addon" ]] || chmod +x "$addon"
    "$addon" run "$@"
    exit $?
  else
    echo "Unrecognized BOSH Genesis Kit addon."
    list
    exit 1
  fi
  ;;
esac
