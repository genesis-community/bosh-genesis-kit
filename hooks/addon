#!/bin/bash
set -eu
vault="secret/$GENESIS_VAULT_PREFIX"
export BOSH_ENVIRONMENT=""
export BOSH_CA_CERT=""
export BOSH_CLIENT=""
export BOSH_CLIENT_SECRET=""

# this one is not handled by the BOSH CLI; we set it for our use
BOSH_URL="https://$(lookup params.static_ip):25555"

# the bosh() helper that Genesis gives us is opinionated;
# great for things that are wanting to deal with the _parent_
# BOSH director, but wholly useless for this kit.
#
# let's override it, shall we?
#
bosh() {
  command $GENESIS_BOSH_COMMAND "$@"
}

setup_alias() {
  BOSH_ENVIRONMENT="$BOSH_URL" \
    BOSH_CA_CERT=$(safe read $vault/ssl/ca:certificate) \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read ${vault}/users/admin:password)" \
    bosh alias-env --tty $GENESIS_ENVIRONMENT| grep -v '^User'
}

is_logged_in() {
  local user
  user="$(bosh -e $GENESIS_ENVIRONMENT env --json | jq -Mr ".Tables[0].Rows[0].user")"
  if [[ "$user" == "null" || "$user" == "(not logged in)" ]] ; then
    return 1
  fi
  if [[ "$user" != "admin" ]] ; then
    describe >&2 "Logged in as #C{$user}, expected to be #C{admin}"
    return 2
  fi
  describe "Logged in as #C{$user}..."
  return 0
}

login() {
  echo "Logging you in as user 'admin'..."
  printf "%s\n%s\n" admin "$(safe read $vault/users/admin:password)" | \
    BOSH_ENVIRONMENT="" \
    BOSH_CA_CERT="" \
    BOSH_CLIENT="" \
    BOSH_CLIENT_SECRET="" \
    bosh -e $GENESIS_ENVIRONMENT login
}

upload_stemcell() {
  local url sha1 os="$1" cpi="$2" version="$3" fix="$4" data="$5"
  read url sha1 <<< "$(echo "$data" | jq -r --arg v "$version" '.[] | select(.version == $v)| .regular | .url + " " + .sha1')"
  describe "" \
    "#G{Initiating upload of stemcell to the }#M{$GENESIS_ENVIRONMENT}#G{ BOSH Director:}" \
    "  * CPI:     #C{$cpi}" \
    "  * OS:      #C{$os}" \
    "  * VERSION: #C{$version}" \
    "  * URL:     #C{$url}" \
    "  * SHA1:    #C{$sha1}" \
    ""
  BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read $vault/ssl/ca:certificate) \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read ${vault}/users/admin:password)" \
    bosh upload-stemcell${fix} --sha1 "$sha1" "$url"
  return $?
}

upload_stemcells() {
  local os=${1:-ubuntu-xenial}

  # Determine cpi
  local cpi prev_cpi prev_cpi_feature feature
  for want in ${GENESIS_REQUESTED_FEATURES}; do
    case "$want" in
      aws|aws-cpi)              cpi="aws-xen-hvm" ;;
      azure|azure-cpi)          cpi="azure-hyperv" ;;
      google|google-cpi)        cpi="google-kvm" ;;
      openstack|openstack-cpi)  cpi="openstack-kvm" ;;
      vsphere|vpshere-cpi)      cpi="vsphere-esxi" ;;
      warden|warden-cpi)        cpi="warden-boshlite" ;;
    esac
    if [[ -n "$cpi" ]] ; then
      if [[ -n "${prev_cpi:-}" && "$prev_cpi" != "$cpi" ]] ; then
        describe >&2 \
          "#R{[CONFLICT]} Features '$prev_cpi_feature' and '$want' both correspond to a" \
          "different CPI, using different stemcell types ($prev_cpi and $cpi " \
          "respectively) -- Cannot continue."
        exit 1
      fi
      prev_cpi_feature="$want"
      prev_cpi="$cpi"
    fi
  done

  if [[ -z "$cpi" ]] ; then
    describe >&2 "#R{[ERROR]} No CPI feature defined -- cannot continue.";
    exit 1
  fi

  local target="bosh-$cpi-$os-go_agent" fix=""
  local stemcells
  stemcells="$(curl -s "https://bosh.io/api/v1/stemcells/${target}?all=0")"
  declare -a versions
  versions=()
  while test $# -gt 0 ; do
    case "$1" in
      --fix) fix=" --fix" ;;
      --*)   describe "#R{[ERROR]} Bad option $1" && exit 1 ;;
      *)     versions+=($1) ;;
    esac
    shift
  done

  if [[ ${#versions[@]} -gt 0 ]] ; then
    local req
    for req in "${versions[@]}" ; do
      # Upload specified stemcells
      local pattern match version url sha1
      pattern="$(echo "$req" | sed -e 's/\.latest$/\.[0-9]+/')"
      match="$(echo "$stemcells" | jq --arg re "^$pattern\$" '.[] | select(.regular? and (.version|test($re)))' | jq -Ms '.')"
      version="$(echo "$match" | jq -Mr '.[] | .version' | sort -n -t. -k1 -k2 -k3 -k4| tail -n1)"
      if [[ -z "$version" ]] ; then
        describe "#R{[ERROR]} No version found matching $req"
      else
        if [[ "$version" != "$req" ]] ; then
          describe "Using best match to #C{$req}: #G{$version}"
        fi
        upload_stemcell "$os" "$cpi" "$version" "$fix" "$match"
      fi
    done
  else
    while true; do
      opts=()
      while read -r count major ; do
        opts+=("-o" "[$major] $major.x ($count minor versions available)")
      done <<< "$(echo "$stemcells" | jq -r '.[] | .version' | cut -d. -f1 | sort -nr | uniq -c)"
      prompt_for major_sc_version "select" "Select the release family for the $cpi $os stemcell you wish to upload:" "${opts[@]}"

      opts=()
      while read -r v ; do
        opts+=("-o" "$v")
      done <<< "$(echo "$stemcells" | jq -r '.[] | .version' | grep "^$major_sc_version\\(\\.\\|$\\)" | sort -rn -t. -k2 -k3 -k4)"
      prompt_for version "select" "Select one of the available $major_sc_version.x versions:" "${opts[@]}"
      upload_stemcell "$os" "$cpi" "$version" "$fix" "$stemcells"
      rc=$?
      prompt_for continue boolean "Upload another?" --default "no"
      [[ "$continue" == "true" ]] || exit $rc
    done
  fi
}

credhub_login() {
  # Check for credhub command
  command -v credhub > /dev/null 2>&1 || _bail "Command 'credhub' not found.  Please install from https://github.com/cloudfoundry-incubator/credhub-cli"

  # Update api target with correct ca's
  command credhub api https://$(lookup params.static_ip):8844 --ca-cert <(safe read $vault/ssl/ca:certificate; safe read $vault/credhub/ca:certificate)

  # Login via stored password
  command credhub login -u credhub-cli -p "$(safe read $vault/uaa/users/credhub-cli:password)"
  echo
  command credhub --version
  echo
}

vault_proxy_login() {
  if ! want_feature vault-credhub-proxy; then
    describe "#R{[ERROR]} Requires feature vault-credhub-proxy"
    exit 1
  fi
  echo
  ip="$(lookup params.static_ip)"
  proxy="${GENESIS_ENVIRONMENT}-proxy"
  password="$(safe read $vault/uaa/users/credhub-admin:password)"
  export SAFE_TARGET=""
  safe target https://$ip:8200 -k --no-strongbox $proxy
  echo "credhub-admin:$password" | safe -T $proxy auth token
  if safe -T $proxy set secret/handshake knock=knock >/dev/null 2>&1; then
    if safe -T $proxy read secret/handshake >/dev/null 2>&1; then
      describe "" \
               "Successfully connected to Credhub Vault Proxy on #C{https://$ip:8200}" \
               "Target name is #C{$proxy}" \
               ""
      exit 0
    else
      describe "#R{[ERROR]} Could not read from Credhub Vault Proxy on $ip"
    fi
  else
    describe "#R{[ERROR]} Authentication failed or could not write to secret/"
  fi
  exit 1
}

list() {
  echo "The following addons are defined:"
  echo
  echo "  alias                Set up a local bosh alias for a director"
  echo
  echo "  login                Log into an (aliased) director"
  echo
  echo "  upload-stemcells     Upload the appropriate BOSH stemcells"
  echo
  echo "  runtime-config       Generate a base runtime config and upload it"
  echo
  echo "  credhub-login        Target and log in to credhub on this bosh director"
  echo
  if want_feature vault-credhub-proxy; then
    echo "  vault-proxy-login    Target and log into credhub via vault proxy using safe"
    echo
  fi

}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

alias)
  setup_alias
  ;;

login)
  setup_alias >/dev/null
  login
  ;;

logout)
  setup_alias >/dev/null
  bosh -e $GENESIS_ENVIRONMENT logout
  ;;

vault-proxy-login)
  vault_proxy_login
  ;;

credhub-login)
  credhub_login
  ;;

upload-stemcells|us)
  upload_stemcells "$@"
  ;;

runtime-config|rc)
  describe "" \
    "The \`netop' user is a local administrator account configured with" \
    "a 4096-bit RSA SSH key for authentication.  It can be used to perform" \
    "out-of-band, remote management of BOSH VMs when BOSH is misbehaving." \
    ""
  prompt_for do_netop boolean \
    "Enable the netop account? " -i

  describe "" \
    "The \`sysop' user is a local administrator account configured with" \
    "a randomized password, for console-based authentication.  This can be" \
    "handy in vSphere environments when network-based authentication breaks." \
    ""
  prompt_for do_sysop boolean \
    "Enable the sysop account? " -i

  (set +e
   BOSH_ENVIRONMENT=$BOSH_URL \
   BOSH_CA_CERT=$(safe read $vault/ssl/ca:certificate) \
   BOSH_CLIENT="admin" \
   BOSH_CLIENT_SECRET="$(safe read ${vault}/users/admin:password)" \
   bosh runtime-config) | sed -e 's/\s+//' > rc.yml

  if [[ ! -s rc.yml ]]; then
    echo "--- {}" > rc.yml
  fi

  if [[ "${do_netop}" == "true" || ${do_sysop} == "true" ]]; then
    BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read $vault/ssl/ca:certificate) \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read ${vault}/users/admin:password)" \
    bosh update-runtime-config <( (
      echo 'releases:'
      echo '  - name:    os-conf'
      echo '    version: 20'
      echo '    url:     https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=20'
      echo '    sha1:    42b1295896c1fbcd36b55bfdedfe86782b2c9fba'
      echo

      echo 'addons:'
      echo '  - name: genesis-local-users'
      echo '    jobs:'
      echo '      - (( replace ))'
      echo '      - name:    user_add'
      echo '        release: os-conf'
      echo '        exclude:'
      echo '          jobs:'
      echo '          - name: user_add'
      echo '            release: os-conf'
      echo '        properties:'
      echo '          persistent_homes: true'
      echo '          users:'
      if [[ "${do_netop}" == "true" ]]; then
        echo '            - name: netop'
        echo '              public_key: (( vault $VAULT_PREFIX "/op/net:public" ))'
      fi
      if [[ "${do_sysop}" == "true" ]]; then
        echo '            - name: sysop'
        echo '              crypted_password: (( vault $VAULT_PREFIX "/op/sys:password-crypt-sha512" ))'
      fi
    ) | VAULT_PREFIX="$vault" spruce merge rc.yml - )

  else
    BOSH_ENVIRONMENT=$BOSH_URL \
    BOSH_CA_CERT=$(safe read $vault/ssl/ca:certificate) \
    BOSH_CLIENT="admin" \
    BOSH_CLIENT_SECRET="$(safe read ${vault}/users/admin:password)" \
    bosh update-runtime-config <(
      spruce merge <(echo "addons:"
                     echo "  - name: genesis-local-users") \
                   rc.yml \
                   <(echo "addons:"
                     echo '  - (( delete "genesis-local-users" ))')
    )
  fi
  ;;

ssh) # DO NOT LIST THIS IN 'list'...
  echo ; describe "#G{Accessing $(lookup params.env) BOSH director via SSH...}" ; echo

  touch .key                             ; chmod 0600 .key
  safe read $vault/op/net:private > .key ; chmod 0400 .key
  trap "rm -f $PWD/.key" QUIT INT TERM EXIT

  ip=$(lookup params.static_ip)
  set -x
  exec ssh netop@$ip -o StrictHostKeyChecking=no -i .key
  ;;

*)
  echo "Unrecognized BOSH Genesis Kit addon."
  list
  exit 1
  ;;
esac
