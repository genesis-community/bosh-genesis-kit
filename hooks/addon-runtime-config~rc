#!/bin/bash
set -u

action="${1:-''}"
if [[ "$action" == 'help' ]] ; then
  describe \
    "Generate the runtime config, and upload it to the target BOSH director" \
    "" \
    "Options:" \
    "  #y{-n}      Dry run, just print out the runtime config without uploading it." \
    "  #y{-y}      Upload changes without prompting for confirmation." \
    "  #y{-d}      Upload the config to the default runtime config, merging with" \
    "          what is currently there.  This is not recommended, but included" \
    "          for backwards compatibility".
  exit 0
fi

[[ "$action" == 'run' ]] || bail \
  "#R{[ERROR]} Internal error: download stemcells addon called with invalid argument." \
  "        Expecting help or run, got '$1'"

# -- MAIN ----------------------------------------------------------------------
[[ -n "${GENESIS_DEBUG:-}" ]] && set -x

describe "" "Gathering current Exodus metadata for #C{$GENESIS_ENVIRONMENT}..."
if ! have_exodus_data ; then bail \
  "BOSH environment '$GENESIS_ENVIRONMENT' has not been deployed.  Please deploy" \
  "it first, then run the 'runtime-config' addon"
fi

params_dns_deployments_whitelist="$(lookup params.dns_deployments_whitelist '[]')"
params_dns_cache="$(lookup params.dns_cache 'true')"
exodus="$(exodus --all)"
IFS=','  read -ra features <<< "$(echo "$exodus" | jq -r .features)"

upload_runtime_config() {
  name="${1:-default}"
  contents="$2"
  genesis_bosh -A update-runtime-config --tty --name="${name}" <(echo "$contents")

}
remove_runtime_config() {
  name="${1:-default}"
  if [[ -n "$(genesis_bosh -A configs --type=runtime --name="$name")" ]] ; then
    describe >&2 "" "Removing existing '$name' runtime:" "- ---"
    get_runtime_config "$name" 2>&1 | sed -e 's/\(.*\)/- \1/' >&2
    echo >&2 ''
    genesis_bosh -A delete-config --type=runtime --name="$name"
  fi
}

get_runtime_config() {
   name="${1:-default}"
   (set +e
   genesis_bosh -A config --type=runtime --name="$name" ) \
   | tail -n+5 | sed -e 's/\s\+$//' | spruce merge
}

generate_dns_runtime() {
  cat <<EOF
addons:
- include:
    stemcell:
    - os: ubuntu-trusty
    - os: ubuntu-xenial
    - os: ubuntu-bionic
    - os: ubuntu-jammy
EOF
if [[ "$params_dns_deployments_whitelist" != '[]' ]] ; then
  echo "    deployments:"
  echo "$params_dns_deployments_whitelist" | jq -cM '.[]' | sed -e 's/^/    - /'
fi
  cat <<EOF
  jobs:
  - name: bosh-dns
    properties:
      api:
        client:
          tls:
            ca:          (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/ca:certificate" ))
            certificate: (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/client:certificate" ))
            private_key: (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/client:key" ))
        server:
          tls:
            ca:          (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/ca:certificate" ))
            certificate: (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/server:certificate" ))
            private_key: (( vault \$GENESIS_SECRETS_BASE "dns_api_tls/server:key" ))
      cache:
        enabled: $params_dns_cache
EOF
  if printf '%s\n' "${features[@]}" | grep -q '^bosh-dns-healthcheck$'; then
    cat <<EOF
      health:
        enabled: true
        client:
          tls:
            ca:          (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/ca:certificate" ))
            certificate: (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/client:certificate" ))
            private_key: (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/client:key" ))
        server:
          tls:
            ca:          (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/ca:certificate" ))
            certificate: (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/server:certificate" ))
            private_key: (( vault \$GENESIS_SECRETS_BASE "dns_healthcheck_tls/server:key" ))
EOF
  fi
  cat <<EOF
    release: bosh-dns
  name: bosh-dns
EOF
  cat overlay/releases/bosh-dns.yml
}

generate_ops_access_runtime() {
  if ! printf '%s\n' "${features[@]}" | grep -q '^\(net\|sys\)op-access$' ; then
    echo ""
    return 0
  fi

  cat <<EOF
addons:
- name: genesis-local-users
  exclude:
    jobs:
    - name: user_add
      release: os-conf
  jobs:
  - name:    user_add
    release: os-conf
    properties:
      persistent_homes: true
      users:
EOF
  if printf '%s\n' "${features[@]}" | grep -q '^netop-access$'; then
    cat <<'EOF'
      - name: netop
        public_key: (( vault $GENESIS_SECRETS_BASE "op/net:public" ))
EOF
  fi
  if printf '%s\n' "${features[@]}" | grep -q '^sysop-access$'; then
    cat <<'EOF'
      - name: sysop
        crypted_password: (( vault $GENESIS_SECRETS_BASE "op/sys:password-crypt-sha512" ))
EOF
  fi
  cat overlay/releases/os-conf.yml
}

generate_merged_default_runtime() {
  spruce merge \
    <(cat <<'EOF'
addons:
- name: genesis-local-users
- name: bosh-dns
EOF
    ) \
    <(get_runtime_config) \
    <( cat <<'EOF'
addons:
- (( delete "genesis-local-users" ))
- (( delete "bosh-dns" ))
EOF
) \
    <(generate_dns_runtime) \
    <(generate_ops_access_runtime)
}

# Parse options
shift
dryrun=
default=
while test $# -gt 0 ; do
  case "$1" in
    -n)  dryrun=1 ;;
    -y)  export BOSH_NON_INTERACTIVE=1 ;;
    -d)  default=1 ;;
    -*)  bail "#R{[ERROR]} Bad option $1" ;;
    *)   bail "#R{[ERROR]} No arguments expected: $1" ;;
  esac
  shift
done

if [[ -n "$dryrun" ]] ; then
  if [[ -n "$default" ]] ; then
    describe "" \
      "Runtime Config" \
      "-----------------------"
    generate_merged_default_runtime
  else
    describe "" \
      "BOSH DNS Runtime Config" \
      "-----------------------"
    generate_dns_runtime | spruce merge

    if printf '%s\n' "${features[@]}" | grep -q '^\(net\|sys\)op-access$' ; then
      describe "" \
        "Operator Access Runtime Config" \
        "------------------------------"
      generate_ops_access_runtime | spruce merge
    fi
  fi
  echo
  exit 0
elif [[ -n "$default" ]] ; then
  describe >&2 "Uploading runtime - this will replace your existing default runtime"
  upload_runtime_config default "$(generate_merged_default_runtime)"
else
  describe >&2 "Uploading 'genesis.bosh-dns' runtime"
  upload_runtime_config "genesis.bosh-dns" "$(generate_dns_runtime | spruce merge)"
  opsaccess="$(generate_ops_access_runtime)"
  if [[ -z "$opsaccess" ]] ; then
    remove_runtime_config "genesis.ops-access"
  else
    describe >&2 "Uploading 'genesis.ops-access' runtime"
    upload_runtime_config "genesis.ops-access" "$(generate_ops_access_runtime | spruce merge)"
  fi
fi
