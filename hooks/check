#!/bin/bash
set -u
#Version check
min_version="2.7.6"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

# Cloud Config checks
ok=yes
if [[ -n "${GENESIS_CLOUD_CONFIG:-}" ]] ; then
  if want_feature ocfp ; then
    _env_scale="$(lookup --merged meta.env_scale)"
    _vm_type="bosh-${_env_scale}"
    _network="${GENESIS_ENVIRONMENT}"
    _disk_type="bosh-${_env_scale}"
  else # Legacy was hard coded
    _vm_type="large"
    _network="bosh"
    _disk_type="bosh"
  fi

  if ! want_feature proto; then
    cloud_config_needs vm_type   "$(lookup params.bosh_vm_type   ${_vm_type})"
    cloud_config_needs network   "$(lookup params.bosh_network   ${_network})"
    cloud_config_needs disk_type "$(lookup params.bosh_disk_pool ${_disk_type})"

    if check_cloud_config ; then
      describe "  cloud-config [#G{OK}]"
    else
      describe "  cloud-config [#R{FAILED}]"
      ok=no
    fi
  fi
fi

# Environment Parameter checks
if want_feature vsphere; then
  for e in ephemeral persistent; do
    t=$(typeof params.vsphere_${e}_datastores)
    if [[ $t != "list" ]]; then
      describe "  ${e} vsphere datastores is a #Y{$t}, not a list [#R{FAILED}]"
      ok=no
    else
      describe "  ${e} vsphere datastores checks out [#G{OK}]"
    fi
  done
fi

if [[ "$ok" == "yes" ]]; then
  describe "  environment files [#G{OK}]"
else
  describe "  environment files [#R{FAILED}]"
  exit 1
fi

