# --- # overrides: basic overrides for genesis compatibility
# exodus:
#   cf_deployment_version: manifest_version

#   #api_url:        (( concat "https://" meta.api_hostname ))
#   admin_username: admin
#   #admin_password: (( vault meta.vault "/admin_user:password" ))
#   system_domain:  (( grab params.system_domain ))
#   app_domain:     (( grab params.apps_domains[0] ))
#   app_domains:    (( grab params.apps_domains ))

#   vaulted_uaa_clients: (( concat meta.vault "/uaa/client_secrets:firehose" ))

#   system_org:   system
#   system_space: system

# BOSH Variables - used to populate ((variables))
bosh-variables:
    admin_password: (( vault meta.vault "/users/admin:password" ))
    blobstore_agent_password: (( vault meta.vault "/blobstore/agent:password" ))
    blobstore_ca:
        certificate: (( vault meta.vault "/blobstore/ca:certificate" ))
    blobstore_director_password: (( vault meta.vault "/blobstore/director:password" ))
    blobstore_server_tls:
        certificate: (( vault meta.vault "/blobstore/server:certificate" ))
        private_key: (( vault meta.vault "/blobstore/server:key" ))
    credhub_admin_client_secret: (( vault meta.vault "/uaa/clients/credhub_admin:secret" ))
    credhub_cli_user_password: (( vault meta.vault "/uaa/users/credhub-cli:password" ))
    credhub_encryption_password: (( vault meta.vault "/credhub/encryption:key" ))
    credhub_tls: 
        ca: (( vault meta.vault "/credhub/ca:certificate" ))
        certificate: (( vault meta.vault "/credhub/server:certificate" ))
        private_key: (( vault meta.vault "/credhub/server:key" ))
    director_name: (( grab name ))
    director_ssl:
        ca: (( vault meta.vault "/ssl/ca:certificate" ))
        certificate: (( vault meta.vault "/ssl/server:certificate" ))
        private_key: (( vault meta.vault "/ssl/server:key" ))
    hm_password: (( vault meta.vault "/uaa/clients/hm:secret" ))
    internal_ip: (( grab params.static_ip ))
    mbus_bootstrap_ssl:
        ca: (( vault meta.vault "/ssl/ca:certificate" ))
        certificate: (( vault meta.vault "/ssl/mbus:certificate" ))
        private_key: (( vault meta.vault "/ssl/mbus:key" ))
    nats_ca:
        certificate: (( vault meta.vault "/nats/ca:certificate" ))
        private_key: (( vault meta.vault "/nats/ca:key" ))
    nats_clients_director_tls: 
        certificate: (( vault meta.vault "/nats/director:certificate" ))
        private_key: (( vault meta.vault "/nats/director:key" ))
    nats_clients_health_monitor_tls: 
        certificate: (( vault meta.vault "/nats/health/monitor:certificate" ))
        private_key: (( vault meta.vault "/nats/health/monitor:key" ))
    nats_password: (( vault meta.vault "/nats:password" ))
    nats_server_tls:
        ca: (( vault meta.vault "/nats/ca:certificate" ))
        certificate: (( vault meta.vault "/nats/server:certificate" ))
        private_key: (( vault meta.vault "/nats/server:key" ))
    postgres_password: (( vault meta.vault "/db:password" ))
    uaa_admin_client_secret: (( vault meta.vault "/uaa/clients/uaa_admin:secret" ))
    uaa_clients_director_to_credhub: (( vault meta.vault "/uaa/clients/director_to_credhub:secret" ))
    uaa_encryption_key_1: (( vault meta.vault "/uaa/encryption:key" ))
    uaa_jwt_signing_key: 
        public_key: (( vault meta.vault "/uaa/jwt:public" ))
        private_key: (( vault meta.vault "/uaa/jwt:private" ))
    uaa_service_provider_ssl: 
        certificate: (( vault meta.vault "/ssl/uaa-sp:certificate" ))
        private_key:         (( vault meta.vault "/ssl/uaa-sp:key" ))
    uaa_ssl:
        ca: (( vault meta.vault "/ssl/ca:certificate" ))
        certificate: (( vault meta.vault "/ssl/uaa:certificate" ))
        private_key: (( vault meta.vault "/ssl/uaa:key" ))

params:
    bosh_network:   bosh
    bosh_disk_pool: bosh
    bosh_vm_type:   large

    ca_validity_period:   5y
    cert_validity_period: 1y

    session_timeout: 1 # In days

    ntp: [ 0.pool.ntp.org, 1.pool.ntp.org ]

    static_ip: (( param "What IP will BOSH be accessible on?" ))
    bosh_hostname: bosh

variables: (( prune ))   